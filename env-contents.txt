FLASK_DEBUG=True
MONGO_URI=mongodb+srv://riteshjillewad:ritesh123@cluster0.1izzunu.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
SENDER_EMAIL=riteshjillewad292@gmail.com
SENDER_PASSWORD=zoum tphz ywjo ekan

mail_service.py code

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import time

def send_welcome_mail(employee_email, name):
    max_retries = 3
    delay = 5  # seconds

    for attempt in range(max_retries):
        try:
            # ... (rest of the code is the same)
            sender_email = os.getenv("SENDER_EMAIL")
            sender_password = os.getenv("SENDER_PASSWORD")
            smtp_server = "smtp.gmail.com"
            smtp_port = 587

            if not sender_email or not sender_password:
                raise ValueError("Email credentials not set in .env file.")

            message = MIMEMultipart("alternative")
            message["Subject"] = "Welcome to the Team!"
            message["From"] = sender_email
            message["To"] = employee_email

            html_content = f"""
            <html>
                <body>
                    <h2>Hello {name},</h2>
                    <p>Welcome to the team! We are thrilled to have you join us.</p>
                    <p>More details will follow shortly.</p>
                    <p>Best regards,</p>
                    <p>The HR Team</p>
                </body>
            </html>
            """
            part = MIMEText(html_content, "html")
            message.attach(part)

            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(sender_email, sender_password)
                server.sendmail(sender_email, employee_email, message.as_string())

            print(f"Welcome mail sent to {employee_email} on attempt {attempt + 1}")
            return True # Success, exit the function

        except Exception as e:
            print(f"Attempt {attempt + 1} failed to send welcome mail: {e}")
            if attempt < max_retries - 1:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                return False # All retries failed

def send_contract_mail(employee_email, name, end_date):
    max_retries = 3
    delay = 5  # seconds

    for attempt in range(max_retries):
        try:
            # ... (rest of the code is the same)
            sender_email = os.getenv("SENDER_EMAIL")
            sender_password = os.getenv("SENDER_PASSWORD")
            smtp_server = "smtp.gmail.com"
            smtp_port = 587

            message = MIMEMultipart("alternative")
            message["Subject"] = "Your Employment Contract"
            message["From"] = sender_email
            message["To"] = employee_email

            html_content = f"""
            <html>
                <body>
                    <h2>Dear {name},</h2>
                    <p>This email contains details regarding your employment contract with us.</p>
                    <p>Your contract duration is until: <b>{end_date.strftime('%B %d, %Y')}</b></p>
                    <p>Please find the full contract attached (this is a placeholder for now).</p>
                    <p>Best regards,</p>
                    <p>The HR Team</p>
                </body>
            </html>
            """
            part = MIMEText(html_content, "html")
            message.attach(part)

            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(sender_email, sender_password)
                server.sendmail(sender_email, employee_email, message.as_string())

            print(f"Contract mail sent to {employee_email} on attempt {attempt + 1}")
            return True # Success, exit the function

        except Exception as e:
            print(f"Attempt {attempt + 1} failed to send contract mail: {e}")
            if attempt < max_retries - 1:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                return False # All retries failed